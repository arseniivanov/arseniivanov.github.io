import{O as A,B as g,F as l,M as W,S,U as V,V as b,W as G,C as M,L as P,R as H,a as k,b as q,P as j,c as K,d as N,A as Y,e as E,f as X,g as Z,h as J,i as ee,j as te}from"./three.module.d62d6700.js";const se="modulepreload",R={},ie="/",re=function(e,t){return!t||t.length===0?e():Promise.all(t.map(r=>{if(r=`${ie}${r}`,r in R)return;R[r]=!0;const s=r.endsWith(".css"),i=s?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${r}"]${i}`))return;const a=document.createElement("link");if(a.rel=s?"stylesheet":se,s||(a.as="script",a.crossOrigin=""),a.href=r,document.head.appendChild(a),s)return new Promise((n,d)=>{a.addEventListener("load",n),a.addEventListener("error",()=>d(new Error(`Unable to preload CSS for ${r}`)))})})).then(()=>e())};var y={uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = opacity * texel;

		}`};class u{constructor(){this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1}setSize(){}render(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}}const ae=new A(-1,1,1,-1,0,1),w=new g;w.setAttribute("position",new l([-1,3,0,-1,-1,0,3,-1,0],3));w.setAttribute("uv",new l([0,2,0,0,2,0],2));class oe{constructor(e){this._mesh=new W(w,e)}dispose(){this._mesh.geometry.dispose()}render(e){e.render(this._mesh,ae)}get material(){return this._mesh.material}set material(e){this._mesh.material=e}}class T extends u{constructor(e,t){super(),this.textureID=t!==void 0?t:"tDiffuse",e instanceof S?(this.uniforms=e.uniforms,this.material=e):e&&(this.uniforms=V.clone(e.uniforms),this.material=new S({defines:Object.assign({},e.defines),uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader})),this.fsQuad=new oe(this.material)}render(e,t,r){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=r.texture),this.fsQuad.material=this.material,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(t),this.clear&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),this.fsQuad.render(e))}}class z extends u{constructor(e,t){super(),this.scene=e,this.camera=t,this.clear=!0,this.needsSwap=!1,this.inverse=!1}render(e,t,r){const s=e.getContext(),i=e.state;i.buffers.color.setMask(!1),i.buffers.depth.setMask(!1),i.buffers.color.setLocked(!0),i.buffers.depth.setLocked(!0);let a,n;this.inverse?(a=0,n=1):(a=1,n=0),i.buffers.stencil.setTest(!0),i.buffers.stencil.setOp(s.REPLACE,s.REPLACE,s.REPLACE),i.buffers.stencil.setFunc(s.ALWAYS,a,4294967295),i.buffers.stencil.setClear(n),i.buffers.stencil.setLocked(!0),e.setRenderTarget(r),this.clear&&e.clear(),e.render(this.scene,this.camera),e.setRenderTarget(t),this.clear&&e.clear(),e.render(this.scene,this.camera),i.buffers.color.setLocked(!1),i.buffers.depth.setLocked(!1),i.buffers.stencil.setLocked(!1),i.buffers.stencil.setFunc(s.EQUAL,1,4294967295),i.buffers.stencil.setOp(s.KEEP,s.KEEP,s.KEEP),i.buffers.stencil.setLocked(!0)}}class ne extends u{constructor(){super(),this.needsSwap=!1}render(e){e.state.buffers.stencil.setLocked(!1),e.state.buffers.stencil.setTest(!1)}}class le{constructor(e,t){if(this.renderer=e,t===void 0){const r={minFilter:P,magFilter:P,format:H},s=e.getSize(new b);this._pixelRatio=e.getPixelRatio(),this._width=s.width,this._height=s.height,t=new G(this._width*this._pixelRatio,this._height*this._pixelRatio,r),t.texture.name="EffectComposer.rt1"}else this._pixelRatio=1,this._width=t.width,this._height=t.height;this.renderTarget1=t,this.renderTarget2=t.clone(),this.renderTarget2.texture.name="EffectComposer.rt2",this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.renderToScreen=!0,this.passes=[],y===void 0&&console.error("THREE.EffectComposer relies on CopyShader"),T===void 0&&console.error("THREE.EffectComposer relies on ShaderPass"),this.copyPass=new T(y),this.clock=new M}swapBuffers(){const e=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=e}addPass(e){this.passes.push(e),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}insertPass(e,t){this.passes.splice(t,0,e),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}removePass(e){const t=this.passes.indexOf(e);t!==-1&&this.passes.splice(t,1)}isLastEnabledPass(e){for(let t=e+1;t<this.passes.length;t++)if(this.passes[t].enabled)return!1;return!0}render(e){e===void 0&&(e=this.clock.getDelta());const t=this.renderer.getRenderTarget();let r=!1;for(let s=0,i=this.passes.length;s<i;s++){const a=this.passes[s];if(a.enabled!==!1){if(a.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(s),a.render(this.renderer,this.writeBuffer,this.readBuffer,e,r),a.needsSwap){if(r){const n=this.renderer.getContext(),d=this.renderer.state.buffers.stencil;d.setFunc(n.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e),d.setFunc(n.EQUAL,1,4294967295)}this.swapBuffers()}z!==void 0&&(a instanceof z?r=!0:a instanceof ne&&(r=!1))}}this.renderer.setRenderTarget(t)}reset(e){if(e===void 0){const t=this.renderer.getSize(new b);this._pixelRatio=this.renderer.getPixelRatio(),this._width=t.width,this._height=t.height,e=this.renderTarget1.clone(),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=e,this.renderTarget2=e.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2}setSize(e,t){this._width=e,this._height=t;const r=this._width*this._pixelRatio,s=this._height*this._pixelRatio;this.renderTarget1.setSize(r,s),this.renderTarget2.setSize(r,s);for(let i=0;i<this.passes.length;i++)this.passes[i].setSize(r,s)}setPixelRatio(e){this._pixelRatio=e,this.setSize(this._width,this._height)}}new A(-1,1,1,-1,0,1);const B=new g;B.setAttribute("position",new l([-1,3,0,-1,-1,0,3,-1,0],3));B.setAttribute("uv",new l([0,2,0,0,2,0],2));class fe extends u{constructor(e,t,r,s,i){super(),this.scene=e,this.camera=t,this.overrideMaterial=r,this.clearColor=s,this.clearAlpha=i!==void 0?i:0,this.clear=!0,this.clearDepth=!1,this.needsSwap=!1,this._oldClearColor=new k}render(e,t,r){const s=e.autoClear;e.autoClear=!1;let i,a;this.overrideMaterial!==void 0&&(a=this.scene.overrideMaterial,this.scene.overrideMaterial=this.overrideMaterial),this.clearColor&&(e.getClearColor(this._oldClearColor),i=e.getClearAlpha(),e.setClearColor(this.clearColor,this.clearAlpha)),this.clearDepth&&e.clearDepth(),e.setRenderTarget(this.renderToScreen?null:r),this.clear&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),e.render(this.scene,this.camera),this.clearColor&&e.setClearColor(this._oldClearColor,i),this.overrideMaterial!==void 0&&(this.scene.overrideMaterial=a),e.autoClear=s}}let v,f,p;const F=0;p=new M;const c=new q,m=new j(40,window.innerWidth/window.innerHeight,1,100),h=new K({canvas:document.querySelector("#bg"),antialias:!1});h.setPixelRatio(window.devicePixelRatio);h.setSize(window.innerWidth,window.innerHeight);m.position.setZ(30);m.position.setX(-3);const _=new N(16777215);_.position.set(5,5,5);_.layers.enable(F);const D=new Y(16777215);D.layers.enable(F);c.add(_,D);let U={time:{value:0}},I=[],O=[],he=()=>{O.push(Math.random()*Math.PI,Math.random()*Math.PI*2,(Math.random()*.9+.1)*Math.PI*.1,Math.random()*.9+.1)},ce=new Array(1e4).fill().map(o=>{I.push(Math.random()*1.5+.5),he();var e={x:230,y:230};let t=E.randFloatSpread(e.x),r=E.randFloatSpread(e.y),s=-30;return new X(t,r,s)});c.background=new k(1441814);let C=new g().setFromPoints(ce);C.setAttribute("sizes",new l(I,1));C.setAttribute("shift",new l(O,4));let de=new Z({size:.5,transparent:!0,depthTest:!0,blending:J,onBeforeCompile:o=>{o.uniforms.time=U.time,o.vertexShader=`
      uniform float time;
      attribute float sizes;
      attribute vec4 shift;
      varying vec3 vColor;
      ${o.vertexShader}
    `.replace("gl_PointSize = size;","gl_PointSize = size * sizes;").replace("#include <color_vertex>",`#include <color_vertex>
        float d = abs(position.y) / 30.0;
        d = pow(d, 0.5);
        d = clamp(d, 0., 1.);
        vColor = mix(vec3(227., 155., 0.), vec3(100., 50., 255.), d) / 255.;
      `).replace("#include <begin_vertex>",`#include <begin_vertex>
        float t = time;
        float moveT = mod(shift.x + shift.z * t, PI2);
        float moveS = mod(shift.y + shift.z * t, PI2);
        transformed += vec3(cos(moveS) * sin(moveT), cos(moveT), sin(moveS) * sin(moveT)) * shift.w;
        transformed += normalize(transformed - cameraPosition) * -0.5;
      `),o.fragmentShader=`
      varying vec3 vColor;
      ${o.fragmentShader}
    `.replace("#include <clipping_planes_fragment>",`#include <clipping_planes_fragment>
        float d = length(gl_PointCoord.xy - 0.5);
        //if (d > 0.5) discard;
      `).replace("vec4 diffuseColor = vec4( diffuse, opacity );","vec4 diffuseColor = vec4( vColor, smoothstep(0.5, 0.1, d)/* * 0.5 + 0.5*/ );")}}),x=new ee(C,de);x.rotation.order="ZYX";x.rotation.z=0;c.add(x);async function ue(){const{GLTFLoader:o}=await re(()=>import("./GLTFLoader.5af2bd95.js"),["assets/GLTFLoader.5af2bd95.js","assets/three.module.d62d6700.js"]);let e=new o;const r="/models/walkingman.glb";console.log(r),e.load(r,function(s){const i=s.scene;i.position.z=0,i.position.x=1,i.position.y=-2,c.add(i),f=new te(i);let a=s.animations[0],n=s.animations[1];f.clipAction(a.optimize()).play(),f.clipAction(n.optimize()).play()})}ue();const me=new fe(c,m);v=new le(h);v.addPass(me);function $(){const o=document.body.getBoundingClientRect().top;m.position.z=o*-.01}document.body.onscroll=$;$();function Q(){requestAnimationFrame(Q),h.autoClear=!1,h.clear();const o=p.getDelta();let e=p.getElapsedTime();U.time.value=e*Math.PI,f&&f.update(o),v.render()}const L=document.querySelectorAll(".arrow");function pe(){window.scrollY>300?L.forEach(e=>{e.style.display="none"}):L.forEach(e=>{e.style.display="block"})}window.addEventListener("scroll",pe);Q();
